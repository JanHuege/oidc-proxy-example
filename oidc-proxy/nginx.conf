events {
  worker_connections 128;
}

http {

  lua_package_path '~/lua/?.lua;;';

  # docker embedded DNS server 
  resolver 127.0.0.11 ipv6=off;

  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
  lua_ssl_verify_depth 5;

  # cache for discovery metadata documents
  lua_shared_dict discovery 1m;
  # cache for JWKs
  lua_shared_dict jwks 1m;

  server {
    listen 80;

    # Keycloak (Identity Provider)
    location /auth {
        proxy_pass http://keycloak:8080;
        proxy_set_header Host $http_host;
        proxy_pass_request_headers on;
    }

    # app1 (Relying Party)
    location / {
        access_by_lua_block {
            local opts = {
                redirect_uri_path = "/redirect_uri",
                discovery = "http://keycloak:8080/auth/realms/myapp/.well-known/openid-configuration",
                client_id = "app1",
                client_secret = "b162ec35-3e05-4129-8da1-63d5e721b7d6",
                scope = "openid email",
                access_token_expires_leeway = 30,
                -- This is really, really important
                accept_none_alg = false,
                accept_unsupported_alg = false,
                renew_access_token_on_expiry = true,
                session_contents = {access_token=true, id_token=true}
            }

          -- call authenticate for OpenID Connect user authentication
          local res, err = require("resty.openidc").authenticate(opts)

          if err then
            ngx.status = 500
            ngx.say(err)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          -- Set valid access token and email as request header
          ngx.req.set_header("Authorization", "Bearer " .. res.access_token)
          ngx.req.set_header("X-User", res.id_token.email)

          local index = 0
          local base64TokenPayload = ""
          for i in string.gmatch(res.access_token, "[^%.]+") do
            if (index == 1) then 
              base64TokenPayload = i 
            end
            index = index + 1
          end

          ngx.header['Set-Cookie'] = 'token=' .. base64TokenPayload .. '; path=/; Max-Age=300'
      }

      proxy_pass http://app1:8090;
    }
  }
}